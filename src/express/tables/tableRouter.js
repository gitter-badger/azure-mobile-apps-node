// ----------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// ----------------------------------------------------------------------------
/* Not including this in documentation of the public API
@module azure-mobile-apps/express/tables/attachRoutes
@description
This module takes a table configuration object generated by the {@link module:azure-mobile-apps/express/tables/table table module}
and adds appropriate routes for each HTTP verb to a provided express router.
*/

var parseQuery = require('../middleware/parseQuery'),
    parseItem = require('../middleware/parseItem'),
    authorize = require('../middleware/authorize'),
    notAllowed = require('../middleware/notAllowed'),
    importDefinition = require('../../configuration/importDefinition');

/* Creates an express router with appropriate routes configures for each HTTP verb.
@param {module:azure-mobile-apps/express/tables/table} table Table configuration object.
@returns An express router with routes configured.
*/
module.exports = function (table) {
    var defaultRoute = '/',
        idRoute = '/:id'
        router = table.execute;

    configureOperation('read', 'get', [parseQuery(table)], [defaultRoute, idRoute]);
    configureOperation('insert', 'post', [parseItem(table)], [defaultRoute]);
    configureOperation('undelete', 'post', [parseQuery(table)], [idRoute]);
    configureOperation('update', 'patch', [parseItem(table)], [defaultRoute, idRoute]);
    configureOperation('delete', 'delete', [parseQuery(table)], [defaultRoute, idRoute]);

    // Return table middleware configured by the user (set on the middleware.execute property by the table module).
    // If none has been provided, just return the router we configured
    return !table.middleware.execute || table.middleware.execute.length === 0
        ? [router]
        : table.middleware.execute;

    // attach middleware for the specified operation to the appropriate routes
    function configureOperation(operation, verb, pre, routes) {
        var middleware = buildOperationMiddleware(operation, pre);

        routes.forEach(function (route) {
            router[verb](route, middleware);
        });
    }

    function buildOperationMiddleware(operation, pre) {
        importDefinition.setAccess(table, operation);

        // return 405 not allowed for disabled operations
        if (table[operation].disable) {
            return notAllowed(operation);
        }

        // if no middleware has been configured for the specific operation, just use the executeOperation middleware
        var middleware = table.middleware[operation] || [table.operation];

        // hook up the authorize middleware if specified
        if (table[operation].authorize) middleware.unshift(authorize);

        // add required internal middleware, e.g. parseItem, parseQuery
        if (pre) middleware.unshift.apply(middleware, pre);

        return middleware;
    }
};
